/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:github:tokenizer:hash
 * @fileoverview Tokenize a hash.
 */

'use strict';

/* Dependencies. */
var gh = require('../util/gh');
var shaEnd = require('../util/sha-end');
var locator = require('../util/regex-locator');
var abbr = require('../util/abbreviate');

/* Expose. */
module.exports = exports = hash;

exports.locator = locator(/\b[a-f0-9]{7,40}\b/gi);
exports.notInLink = true;

/* Blacklist of SHAs which are also valid words.
 *
 * GitHub allows abbreviating SHAs up to 7 characters.
 * These are ignored in text because they might just be
 * ment as normal words.  If youâ€™d like these to link to
 * their SHAs, use more than 7 characters.
 *
 * Generated by:
 *
 *     egrep -i "^[a-f0-9]{7,}$" /usr/share/dict/words
 */
var BLACKLIST = [
  'deedeed',
  'fabaceae'
];

/**
 * Tokenise a hash.
 *
 * @example
 *   tokenizeHash(eat, 'bada555');
 *
 * @property {boolean} notInLink - Disable nested links.
 * @property {Function} locator - Hash locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `link` node.
 */
function hash(eat, value, silent) {
  var self = this;
  var index = shaEnd(value, 0);
  var subvalue;
  var href;
  var now;
  var node;

  if (index === -1) {
    return;
  }

  subvalue = value.slice(0, index);

  if (isBlacklisted(subvalue)) {
    return;
  }

  /* istanbul ignore if - maybe used by plug-ins */
  if (silent) {
    return true;
  }

  href = gh(self.github) + 'commit/' + subvalue;
  now = eat.now();

  node = eat(subvalue)(
    self.renderLink(true, href, subvalue, null, now, eat)
  );

  node.children = [{
    type: 'inlineCode',
    value: abbr(subvalue),
    position: node.children[0].position
  }];

  return node;
}

/**
 * Check if a value is a SHA.
 *
 * @param {string} sha - Commit hash.
 * @return {boolean} - Whether `sha` is not blacklisted.
 */
function isBlacklisted(sha) {
  return BLACKLIST.indexOf(sha.toLowerCase()) !== -1;
}
